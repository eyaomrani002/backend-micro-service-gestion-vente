package org.ms.client_service.web;

import org.ms.client_service.entities.Client;
import org.ms.client_service.feign.FactureServiceClient;
import org.ms.client_service.feign.DeviseServiceClient;
import org.ms.client_service.model.Facture;
import org.ms.client_service.repository.ClientRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/clients")
public class ClientRestController {
    @Autowired
    private ClientRepository clientRepository;
    @Autowired
    private FactureServiceClient factureServiceClient;
    @Autowired
    private DeviseServiceClient deviseServiceClient;

    @GetMapping
    public List<Client> list() {
        return clientRepository.findAll();
    }

    @GetMapping("/{id}")
    public Client getOne(@PathVariable("id") Long id) {
        return clientRepository.findById(id).orElseThrow(() -> new RuntimeException("Client not found"));
    }

    @PostMapping
    public Client save(@RequestBody Client client) {
        return clientRepository.save(client);
    }

    @PutMapping("/{id}")
    public Client update(@PathVariable("id") Long id, @RequestBody Client client) {
        client.setId(id);
        return clientRepository.save(client);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable("id") Long id) {
        clientRepository.deleteById(id);
    }

    @GetMapping("/{id}/chiffre-affaires")
    public Double getChiffreAffaires(@PathVariable Long id, @RequestParam(required = false) Integer annee) {
        return factureServiceClient.getChiffreAffairesByClient(id, annee);
    }

    @GetMapping("/{id}/chiffre-affaires/convert")
    public Double getChiffreAffairesConverti(@PathVariable Long id,
                                            @RequestParam(required = false) Integer annee,
                                            @RequestParam String devise) {
        Double ca = factureServiceClient.getChiffreAffairesByClient(id, annee);
        return deviseServiceClient.convertDevise(ca, "MAD", devise);
    }

    @GetMapping("/{id}/reste-a-payer")
    public Double getResteAPayer(@PathVariable Long id) {
        return factureServiceClient.getResteAPayerByClient(id);
    }

    @GetMapping("/{id}/factures")
    public List<Facture> getFacturesByStatut(@PathVariable Long id, @RequestParam(required = false) String statut) {
        return factureServiceClient.findFacturesByClientAndStatut(id, statut);
    }

    @GetMapping("/fideles")
    public List<Client> getClientsFideles(@RequestParam(defaultValue = "5") int limit) {
        List<Client> clients = clientRepository.findAll();
        return clients.stream()
                .sorted((c1, c2) -> {
                    Double ca1 = factureServiceClient.getChiffreAffairesByClient(c1.getId(), null);
                    Double ca2 = factureServiceClient.getChiffreAffairesByClient(c2.getId(), null);
                    return ca2.compareTo(ca1);
                })
                .limit(limit)
                .collect(Collectors.toList());
    }

    @GetMapping("/{id}/produits-sollicites")
    public List<Map<String, Object>> getProduitsSollicites(@PathVariable Long id, @RequestParam(defaultValue = "5") int limit) {
        return factureServiceClient.getProduitsSollicitesByClient(id, limit);
    }
}