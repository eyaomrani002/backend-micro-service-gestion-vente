package org.ms.facture_service;

import org.ms.facture_service.entities.Facture;
import org.ms.facture_service.entities.FactureLigne;
import org.ms.facture_service.feign.AuthServiceClient;
import org.ms.facture_service.feign.ClientServiceClient;
import org.ms.facture_service.feign.ProduitServiceClient;
import org.ms.facture_service.model.Client;
import org.ms.facture_service.model.Produit;
import org.ms.facture_service.repository.FactureLigneRepository;
import org.ms.facture_service.repository.FactureRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.cloud.openfeign.EnableFeignClients;
import org.springframework.context.annotation.Bean;
import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
import org.springframework.hateoas.PagedModel;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;

import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.Random;
import java.util.logging.Logger;

@SpringBootApplication
@EnableFeignClients
@EnableDiscoveryClient
public class FactureServiceApplication {
    private static final Logger LOGGER = Logger.getLogger(FactureServiceApplication.class.getName());

    public static void main(String[] args) {
        SpringApplication.run(FactureServiceApplication.class, args);
    }

    @Bean
    CommandLineRunner start(FactureRepository factureRepository, FactureLigneRepository factureLigneRepository,
                            ClientServiceClient clientServiceClient, ProduitServiceClient produitServiceClient,
                            AuthServiceClient authServiceClient, RepositoryRestConfiguration restConfiguration) {
        return args -> {
            try {
                // Log startup
                LOGGER.info("Starting invoice initialization");

                // Authenticate to get a JWT token
                LOGGER.info("Attempting to authenticate with user1");
                Map<String, String> tokens = authServiceClient.login("user1", "123");
                String jwtToken = tokens.get("access-token");
                LOGGER.info("Authentication successful, JWT token obtained");
                UsernamePasswordAuthenticationToken authentication =
                        new UsernamePasswordAuthenticationToken("user1", jwtToken, Collections.emptyList());
                SecurityContextHolder.getContext().setAuthentication(authentication);

                // Configure REST to expose IDs
                restConfiguration.exposeIdsFor(Facture.class, FactureLigne.class);

                // Check existing invoices
                long invoiceCount = factureRepository.count();
                LOGGER.info("Current invoice count: " + invoiceCount);
                if (invoiceCount > 0) {
                    LOGGER.info("Invoices already exist, skipping initialization.");
                    return;
                }

                // Fetch client from client-service
                LOGGER.info("Fetching client with ID 1");
                Client client = clientServiceClient.findClientById(1L);
                if (client == null) {
                    LOGGER.warning("Client with ID 1 not found, using default client.");
                    client = new Client(1L, "Client Test", "test@mail.com", "Adresse");
                }
                LOGGER.info("Client fetched: " + client.getName());

                // Create and save an invoice
                Facture facture = new Facture(new Date(), "NON_PAYEE", client.getId());
                facture.setClient(client);
                facture = factureRepository.save(facture);
                LOGGER.info("Created invoice with ID: " + facture.getId());

                // Fetch products from produit-service
                LOGGER.info("Fetching products from produit-service");
                PagedModel<Produit> produits = produitServiceClient.getAllProduits(0, 10);
                if (produits != null && produits.getContent() != null && !produits.getContent().isEmpty()) {
                    LOGGER.info("Found " + produits.getContent().size() + " products");
                    for (Produit p : produits.getContent()) {
                        FactureLigne ligne = new FactureLigne();
                        ligne.setProduitID(p.getId());
                        ligne.setPrice(p.getPrice());
                        ligne.setQuantity(1 + new Random().nextInt(5));
                        ligne.setFacture(facture);
                        factureLigneRepository.save(ligne);
                        LOGGER.info("Created invoice line for product ID: " + p.getId());
                    }
                } else {
                    LOGGER.warning("No products found from produit-service, creating a dummy invoice line.");
                    FactureLigne ligne = new FactureLigne();
                    ligne.setProduitID(1L);
                    ligne.setPrice(10.0);
                    ligne.setQuantity(2);
                    ligne.setFacture(facture);
                    factureLigneRepository.save(ligne);
                    LOGGER.info("Created dummy invoice line for product ID 1");
                }

                // Refresh and save the invoice
                facture = factureRepository.findById(facture.getId()).orElse(facture);
                factureRepository.save(facture);
                LOGGER.info("Successfully created example invoice with ID: " + facture.getId());
            } catch (Exception e) {
                LOGGER.severe("Failed to initialize invoices: " + e.getMessage());
                e.printStackTrace();
            }
        };
    }
}


/*[
  {
    "id": 1,
    "dateFacture": "2025-05-29T01:20:00.000+00:00",
    "status": "NON_PAYEE",
    "clientID": 1,
    "client": {
      "id": 1,
      "name": "Client Test",
      "email": "test@mail.com",
      "adresse": "Adresse"
    },
    "factureLignes": [
      {
        "id": 1,
        "produitID": 1,
        "price": 10.0,
        "quantity": 2,
        "produit": {
          "id": 1,
          "name": "Produit indisponible",
          "price": 0.0,
          "quantity": 0
        }
      }
    ]
  }
]*/