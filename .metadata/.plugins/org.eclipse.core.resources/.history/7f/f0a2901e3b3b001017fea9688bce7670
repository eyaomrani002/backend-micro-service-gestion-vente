package org.ms.reglement_service.web;

import jakarta.validation.Valid;
import org.ms.reglement_service.entities.Reglement;
import org.ms.reglement_service.feign.FactureServiceClient;
import org.ms.reglement_service.feign.DeviseServiceClient;
import org.ms.reglement_service.model.Facture;
import org.ms.reglement_service.model.Devise;
import org.ms.reglement_service.repository.ReglementRepository;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;
import feign.FeignException;

import java.util.*;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
@RefreshScope
@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/reglements")
public class ReglementRestController {
    private final ReglementRepository reglementRepository;
    private final FactureServiceClient factureServiceClient;
    private final DeviseServiceClient deviseServiceClient;
    private static final Logger logger = LoggerFactory.getLogger(ReglementRestController.class);

    public ReglementRestController(ReglementRepository reglementRepository,
                                   FactureServiceClient factureServiceClient,
                                   DeviseServiceClient deviseServiceClient) {
        this.reglementRepository = reglementRepository;
        this.factureServiceClient = factureServiceClient;
        this.deviseServiceClient = deviseServiceClient;
    }

    @GetMapping
    public Map<String, Object> getAllReglements(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "5") int size,
            @RequestParam(required = false) String statut,
            @RequestParam(required = false) String modePaiement) {
        Page<Reglement> pageReglements = reglementRepository.findByStatutAndModePaiement(statut, modePaiement, PageRequest.of(page, size));
        List<Map<String, Object>> enrichedReglements = pageReglements.getContent().stream()
                .map(this::enrichReglementWithFactureDetails)
                .collect(Collectors.toList());
        Map<String, Object> response = new HashMap<>();
        response.put("reglements", enrichedReglements);
        response.put("totalPages", pageReglements.getTotalPages());
        response.put("totalElements", pageReglements.getTotalElements());
        return response;
    }
    
    // Récupérer un règlement par son ID

    @GetMapping("/{id}")
    public Map<String, Object> getReglement(@PathVariable Long id) {
        Reglement reglement = reglementRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Reglement not found for ID: " + id));
        return enrichReglementWithFactureDetails(reglement);
    }
    
    
    // Créer un nouveau règlement

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public Reglement createReglement(@Valid @RequestBody Reglement reglement) {
        validateReglement(reglement);
        Reglement saved = reglementRepository.save(reglement);
        updateFactureStatus(saved.getFactureId());
        return saved;
    }
    
    // Mettre à jour un règlement existant
    @PutMapping("/{id}")
    public Reglement updateReglement(@PathVariable Long id, @Valid @RequestBody Reglement reglement) {
        Reglement existing = reglementRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Règlement non trouvé"));
        validateReglement(reglement);
        // Met à jour les champs
        existing.setMontant(reglement.getMontant());
        existing.setDateReglement(reglement.getDateReglement());
        existing.setModePaiement(reglement.getModePaiement());
        existing.setReference(reglement.getReference());
        existing.setStatut(reglement.getStatut());
        existing.setFactureId(reglement.getFactureId());
        Reglement updated = reglementRepository.save(existing);
        updateFactureStatus(updated.getFactureId());
        return updated;
    }
    
    // Supprimer un règlement

    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void deleteReglement(@PathVariable Long id) {
        Reglement reglement = reglementRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Règlement non trouvé"));
        reglementRepository.deleteById(id);
        updateFactureStatus(reglement.getFactureId());
    }

    @GetMapping("/facture/{factureId}")
    public List<Map<String, Object>> getReglementsByFacture(@PathVariable Long factureId) {
        List<Reglement> reglements = reglementRepository.findByFactureId(factureId);
        return reglements.stream()
                .map(this::enrichReglementWithFactureDetails)
                .collect(Collectors.toList());
    }

    @GetMapping("/client/{clientId}")
    public Map<String, Object> getReglementsByClient(
            @PathVariable Long clientId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "5") int size,
            @RequestParam(required = false) String statut,
            @RequestParam(required = false) String modePaiement) {
        List<Long> factureIds;
        try {
            factureIds = factureServiceClient.getFactureIdsByClient(clientId);
        } catch (FeignException e) {
            throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, "Facture service unavailable: " + e.getMessage());
        }
        Page<Reglement> pageReglements;
        if (statut != null || modePaiement != null) {
            pageReglements = (Page<Reglement>) reglementRepository.findByStatutAndModePaiement(statut, modePaiement, PageRequest.of(page, size))
                    .map(r -> factureIds.contains(r.getFactureId()) ? r : null)
                    .filter(Objects::nonNull);
        } else {
            pageReglements = reglementRepository.findByFactureIdIn(factureIds, PageRequest.of(page, size));
        }
        List<Map<String, Object>> enrichedReglements = pageReglements.getContent().stream()
                .map(this::enrichReglementWithFactureDetails)
                .collect(Collectors.toList());
        Map<String, Object> response = new HashMap<>();
        response.put("reglements", enrichedReglements);
        response.put("totalPages", pageReglements.getTotalPages());
        response.put("totalElements", pageReglements.getTotalElements());
        return response;
    }

    // --- Validation et mise à jour du statut de la facture ---

    private void validateReglement(Reglement reglement) {
        if (reglement.getFactureId() == null || reglement.getMontant() <= 0) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Facture ID and positive montant are required");
        }
        Facture facture;
        try {
            facture = factureServiceClient.findFactureById(reglement.getFactureId());
        } catch (FeignException e) {
            throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, "Facture service unavailable: " + e.getMessage());
        }
        if (facture == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Facture not found for ID: " + reglement.getFactureId());
        }
        if (reglement.getDateReglement() == null) {
            reglement.setDateReglement(new Date());
        }
        if (reglement.getStatut() == null || !List.of("COMPLET", "PARTIEL", "ANNULE").contains(reglement.getStatut())) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid or missing statut: must be COMPLET, PARTIEL, or ANNULE");
        }
        if (reglement.getModePaiement() == null) {
            reglement.setModePaiement("MAD");
        } else {
            try {
                Devise devise = deviseServiceClient.findDeviseByCode(reglement.getModePaiement());
                if (devise == null || devise.getCode() == null) {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid currency in modePaiement: " + reglement.getModePaiement());
                }
            } catch (FeignException e) {
                throw new ResponseStatusException(HttpStatus.SERVICE_UNAVAILABLE, "Devise service unavailable: " + e.getMessage());
            }
        }
        if (reglement.getReference() == null) {
            reglement.setReference("PAY-" + System.currentTimeMillis());
        }
    }

    private void updateFactureStatus(Long factureId) {
        try {
            Facture facture = factureServiceClient.findFactureById(factureId);
            if (facture == null || facture.getTotal() == null) return;
            List<Reglement> reglements = reglementRepository.findByFactureId(factureId);
            double totalPaid = reglements.stream()
                    .filter(r -> !"ANNULE".equals(r.getStatut()))
                    .mapToDouble(r -> {
                        if (!"MAD".equals(r.getModePaiement())) {
                            Devise devise = deviseServiceClient.findDeviseByCode(r.getModePaiement());
                            if (devise == null) return 0.0;
                            return r.getMontant() * devise.getTauxChange();
                        }
                        return r.getMontant();
                    }).sum();
            String newStatus = "NON_PAYEE";
            if (totalPaid == 0) newStatus = "NON_PAYEE";
            else if (totalPaid < facture.getTotal()) newStatus = "PARTIELLEMENT_PAYEE";
            else newStatus = "PAYEE";
            factureServiceClient.updateFactureMontantPaye(factureId, totalPaid);
            factureServiceClient.updateFactureStatus(factureId, newStatus);
        } catch (Exception e) {
            System.err.println("Failed to update facture status for factureId=" + factureId + ": " + e.getMessage());
        }
    }

    private Map<String, Object> enrichReglementWithFactureDetails(Reglement reglement) {
        Map<String, Object> reglementMap = new HashMap<>();
        reglementMap.put("id", reglement.getId());
        reglementMap.put("factureId", reglement.getFactureId());
        reglementMap.put("montant", reglement.getMontant());
        reglementMap.put("dateReglement", reglement.getDateReglement());
        reglementMap.put("modePaiement", reglement.getModePaiement());
        reglementMap.put("reference", reglement.getReference());
        reglementMap.put("statut", reglement.getStatut());

        try {
            Facture facture = factureServiceClient.findFactureById(reglement.getFactureId());
            if (facture != null) {
                Map<String, Object> factureDetails = new HashMap<>();
                factureDetails.put("total", facture.getTotal());
                factureDetails.put("status", facture.getStatus());
                if (facture.getClient() != null) {
                    factureDetails.put("clientName", facture.getClient().getName());
                    factureDetails.put("clientId", facture.getClient().getId());
                }
                reglementMap.put("factureDetails", factureDetails);
            }
        } catch (FeignException e) {
            reglementMap.put("factureDetails", "Facture service unavailable");
        }
        return reglementMap;
    }
}