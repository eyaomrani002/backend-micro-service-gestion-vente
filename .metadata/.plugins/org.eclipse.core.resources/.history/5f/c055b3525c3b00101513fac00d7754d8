package org.ms.facture_service.feign;

import java.util.Collections;

import org.ms.facture_service.model.Produit;
import org.springframework.cloud.openfeign.FallbackFactory;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

@FeignClient(name="PRODUIT-SERVICE", fallbackFactory = ProduitServiceClientFallbackFactory.class)
public interface ProduitServiceClient {
    @GetMapping("/produits")
    Page<Produit> getAllProduits(@RequestParam("page") int page, @RequestParam("size") int size);

    @GetMapping("/produits/{id}")
    Produit getProduitById(@PathVariable("id") Long id);
}

@Component
class ProduitServiceClientFallbackFactory implements FallbackFactory<ProduitServiceClient> {
    @Override
    public ProduitServiceClient create(Throwable cause) {
        return new ProduitServiceClient() {
            @Override
            public Page<Produit> getAllProduits(int page, int size) {
                System.err.println("Fallback triggered for getAllProduits: " + cause.getMessage());
                return new PageImpl<>(Collections.emptyList());
            }

            @Override
            public Produit getProduitById(Long id) {
                System.err.println("Fallback triggered for getProduitById with id " + id + ": " + cause.getMessage());
                return new Produit(); // Retourne un objet Produit vide ou avec des valeurs par d√©faut
            }
        };
    }
}
