package org.ms.facture_service.entities;

import lombok.*;
import org.ms.facture_service.model.Client;
import jakarta.persistence.*;
import java.util.Collection;
import java.util.Date;

@Entity
@Data @NoArgsConstructor @AllArgsConstructor @ToString
public class Facture {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Temporal(TemporalType.DATE)
    private Date dateFacture;
    private String status;
    private Double total;
    private Double resteAPayer;
    private Double montantPaye; // Nouveau champ
    @OneToMany(mappedBy = "facture", fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)
    private Collection<FactureLigne> factureLignes;
    @Transient
    private Client client;
    @Column(name = "client_id")
    private Long clientID;

    @PrePersist @PreUpdate
    public void computeTotal() {
        if (factureLignes != null && !factureLignes.isEmpty()) {
            this.total = factureLignes.stream()
                    .mapToDouble(fl -> fl.getPrice() * fl.getQuantity())
                    .sum();
            if ("PAYEE".equals(status)) {
                this.resteAPayer = 0.0;
                this.montantPaye = total;
            } else if ("PARTIELLEMENT_PAYEE".equals(status)) {
                this.resteAPayer = total - (montantPaye != null ? montantPaye : 0.0);
            } else {
                this.resteAPayer = total;
                this.montantPaye = 0.0;
            }
        } else {
            this.total = 0.0;
            this.resteAPayer = 0.0;
            this.montantPaye = 0.0;
        }
        if (this.status == null) this.status = "NON_PAYEE";
        if (factureLignes != null) {
            for (FactureLigne ligne : factureLignes) {
                ligne.setFacture(this);
            }
        }
    }
}