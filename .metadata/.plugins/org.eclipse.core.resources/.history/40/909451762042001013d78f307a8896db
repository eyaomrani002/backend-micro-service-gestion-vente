package org.ms.client_service.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.http.HttpMethod;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .cors() // Active le CORS
            .and()
            .csrf().disable() // Désactive CSRF pour une API REST
            .headers(headers -> headers.frameOptions(frame -> frame.disable()))
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth -> auth
                .requestMatchers(HttpMethod.OPTIONS, "/**").permitAll() // Autorise les requêtes OPTIONS pour CORS
                .requestMatchers("/h2-console/**").permitAll() // Autorise la console H2
                .requestMatchers("/api/auth/**").permitAll() // Autorise les endpoints d'authentification
                .requestMatchers(HttpMethod.GET, "/clients/**").permitAll() // GET pour tous
                .requestMatchers(HttpMethod.POST, "/clients/**").permitAll() // POST pour tous
                .requestMatchers(HttpMethod.PUT, "/clients/**").permitAll() // PUT pour tous
                .requestMatchers(HttpMethod.DELETE, "/clients/**").permitAll() // DELETE pour tous
                .anyRequest().authenticated() // Toutes les autres requêtes nécessitent une authentification
            )
            .addFilterBefore(new JwtAuthorizationFilter(), UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }
}